//			for(int i = 0; i < newSize; i++) {
//				for(int j = 0; j < newSize; j++) {
//					Q1[i][j] = thePixels[i][j];
//				}
//			}
//			
//			
//			
//			for(int i = newSize; i < R.getSize(); i++) {
//				for(int j = 0; j < newSize; j++) {
//					Q2[i][j] = thePixels[i][j];
//				}
//			}
//			
//			
//			
//			for(int i = 0; i < newSize; i++) {
//				for(int j = newSize; j < R.getSize(); j++) {
//					Q3[i][j] = thePixels[i][j];
//				}
//			}
//			
//			
//			
//			for(int i = newSize; i < R.getSize(); i++) {
//				for(int j = newSize; j < R.getSize(); j++) {
//					Q4[i][j] = thePixels[i][j];
//				}
//			}




public class QuadrantTree {
	
	QTreeNode root;

	public QuadrantTree(int[][] thePixels) {
		QTreeNode R = new QTreeNode();
		R.setSize(thePixels.length);
		R.setx(thePixels[0][0]);
		R.sety(thePixels[0][0]);
		R.setColor(Gui.averageColor(thePixels, R.getx(),R.gety(),R.getSize()));
		
		if(R.getSize() == 1) return;
		else {
			int newSize = R.getSize()/2;
			
			int Q1[][] = new int[newSize][newSize];
			int Q2[][] = new int[newSize][newSize];
			int Q3[][] = new int[newSize][newSize];
			int Q4[][] = new int[newSize][newSize];
			
			
			for(int i = 0; i < newSize; i++) {
				for(int j = 0; j < newSize; j++) {
					Q1[i][j] = thePixels[R.getx() + i][R.gety() + j];
					Q2[i][j] = thePixels[R.getx() + newSize + i][R.gety()+ j];
					Q3[i][j] = thePixels[R.getx()+ i][R.gety() + newSize + j];
					Q4[i][j] = thePixels[R.getx() + newSize + i][R.gety()+ newSize + j];
					
				}
			}
			
			R.setChild(QuadrantTree(Q1), 0);
			R.getChild(0).setParent(R);
			R.setChild(QuadrantTree(Q2), 1);
			R.getChild(1).setParent(R);
			R.setChild(QuadrantTree(Q3), 2);
			R.getChild(2).setParent(R);
			R.setChild(QuadrantTree(Q4), 3);
			R.getChild(3).setParent(R);
			
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}

public Duple findMatching(QTreeNode r, int theColor, int theLevel) {
		Duple match = new Duple();
		ListNode<QTreeNode> similar = new ListNode<QTreeNode>(null);
		int count = 0;

		if(r.isLeaf() || theLevel <=0) {
			if(Gui.similarColor(r.getColor(), theColor)) {
				match.setCount(1);
				match.setFront(similar);
				return match;


			}else {
				if(Gui.similarColor(r.getColor(), theColor)) {

					ListNode<QTreeNode> q1 = findMatching(r.getChild(0),theColor,theLevel-1).getFront();
					ListNode<QTreeNode> q2 = findMatching(r.getChild(1),theColor,theLevel-1).getFront();
					ListNode<QTreeNode> q3 = findMatching(r.getChild(2),theColor,theLevel-1).getFront();
					ListNode<QTreeNode> q4 = findMatching(r.getChild(3),theColor,theLevel-1).getFront();

					similar.setNext(q1);
					ListNode<QTreeNode> lastNode = similar;
					while(lastNode.getNext() != null) {
						lastNode = lastNode.getNext();
					}

					lastNode.setNext(q2);
					while(lastNode.getNext() != null) {
						lastNode = lastNode.getNext();
					}

					lastNode.setNext(q3);
					while(lastNode.getNext() != null) {
						lastNode = lastNode.getNext();
					}

					lastNode.setNext(q4);

					ListNode<QTreeNode> curr = similar;
					while(curr != null) {
						if(Gui.similarColor(curr.getData().getColor(), theColor)) {
							count++;
						}
						curr = curr.getNext();
					}



				}

			}

		}

		match.setFront(similar);
		match.setCount(count);
		return match;

	}
